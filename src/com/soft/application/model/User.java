package com.soft.application.model;
/*

 * User.java
 *
 * Generated with Matisse Schema Definition Language 9.1.10
 * Generation date: Sun Mar 18 18:46:52 2018
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

import com.matisse.reflect.*;

/**
 * <code>User</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class User extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.10
     * Generation Date: Sun Mar 18 18:46:52 2018
     */

    /*
     * Class variables and methods
     */

    /** Class <code>User</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("User"));

    /**
     * Gets the <code>User</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public User(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected User(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(User.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, User.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(User.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, User.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'id' */

    /** Attribute <code>id</code> cache ID */
    private static int idCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("id",CID));

    /**
     * Gets the <code>id</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getIdAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(idCID);
    }


    /**
     * Gets the <code>id</code> attribute value.
     * @return the value
     *
     * @see #setId
     * @see #removeId
     */
    public final int getId() {
        return getInteger(getIdAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>id</code> attribute value.
     * @param val the new value
     *
     * @see #getId
     * @see #removeId
     */
    public final void setId(int val) {
        setInteger(getIdAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>id</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getId
     * @see #setId
     */
    public final void removeId() {
        removeValue(getIdAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getId
     * @see #setId
     */
    public final boolean isIdDefaultValue() {
        return isDefaultValue(getIdAttribute(getMtDatabase()));
    }


    /* Attribute 'firstname' */

    /** Attribute <code>firstname</code> cache ID */
    private static int firstnameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("firstname",CID));

    /**
     * Gets the <code>firstname</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getFirstnameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(firstnameCID);
    }


    /**
     * Gets the <code>firstname</code> attribute value.
     * @return the value
     *
     * @see #setFirstname
     * @see #removeFirstname
     */
    public final String getFirstname() {
        return getString(getFirstnameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>firstname</code> attribute value.
     * @param val the new value
     *
     * @see #getFirstname
     * @see #removeFirstname
     */
    public final void setFirstname(String val) {
        setString(getFirstnameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>firstname</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getFirstname
     * @see #setFirstname
     */
    public final void removeFirstname() {
        removeValue(getFirstnameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getFirstname
     * @see #setFirstname
     */
    public final boolean isFirstnameDefaultValue() {
        return isDefaultValue(getFirstnameAttribute(getMtDatabase()));
    }


    /* Attribute 'middlename' */

    /** Attribute <code>middlename</code> cache ID */
    private static int middlenameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("middlename",CID));

    /**
     * Gets the <code>middlename</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getMiddlenameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(middlenameCID);
    }


    /**
     * Gets the <code>middlename</code> attribute value.
     * @return the value
     *
     * @see #setMiddlename
     * @see #removeMiddlename
     */
    public final String getMiddlename() {
        return getString(getMiddlenameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>middlename</code> attribute value.
     * @param val the new value
     *
     * @see #getMiddlename
     * @see #removeMiddlename
     */
    public final void setMiddlename(String val) {
        setString(getMiddlenameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>middlename</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getMiddlename
     * @see #setMiddlename
     */
    public final void removeMiddlename() {
        removeValue(getMiddlenameAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getMiddlename
     * @see #setMiddlename
     */
    public final boolean isMiddlenameNull() {
        return isNull(getMiddlenameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getMiddlename
     * @see #setMiddlename
     */
    public final boolean isMiddlenameDefaultValue() {
        return isDefaultValue(getMiddlenameAttribute(getMtDatabase()));
    }


    /* Attribute 'lastname' */

    /** Attribute <code>lastname</code> cache ID */
    private static int lastnameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("lastname",CID));

    /**
     * Gets the <code>lastname</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getLastnameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(lastnameCID);
    }


    /**
     * Gets the <code>lastname</code> attribute value.
     * @return the value
     *
     * @see #setLastname
     * @see #removeLastname
     */
    public final String getLastname() {
        return getString(getLastnameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>lastname</code> attribute value.
     * @param val the new value
     *
     * @see #getLastname
     * @see #removeLastname
     */
    public final void setLastname(String val) {
        setString(getLastnameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>lastname</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getLastname
     * @see #setLastname
     */
    public final void removeLastname() {
        removeValue(getLastnameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getLastname
     * @see #setLastname
     */
    public final boolean isLastnameDefaultValue() {
        return isDefaultValue(getLastnameAttribute(getMtDatabase()));
    }


    /* Attribute 'address' */

    /** Attribute <code>address</code> cache ID */
    private static int addressCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("address",CID));

    /**
     * Gets the <code>address</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAddressAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(addressCID);
    }


    /**
     * Gets the <code>address</code> attribute value.
     * @return the value
     *
     * @see #setAddress
     * @see #removeAddress
     */
    public final String getAddress() {
        return getString(getAddressAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>address</code> attribute value.
     * @param val the new value
     *
     * @see #getAddress
     * @see #removeAddress
     */
    public final void setAddress(String val) {
        setString(getAddressAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>address</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAddress
     * @see #setAddress
     */
    public final void removeAddress() {
        removeValue(getAddressAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAddress
     * @see #setAddress
     */
    public final boolean isAddressDefaultValue() {
        return isDefaultValue(getAddressAttribute(getMtDatabase()));
    }


    /* Attribute 'username' */

    /** Attribute <code>username</code> cache ID */
    private static int usernameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("username",CID));

    /**
     * Gets the <code>username</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getUsernameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(usernameCID);
    }


    /**
     * Gets the <code>username</code> attribute value.
     * @return the value
     *
     * @see #setUsername
     * @see #removeUsername
     */
    public final String getUsername() {
        return getString(getUsernameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>username</code> attribute value.
     * @param val the new value
     *
     * @see #getUsername
     * @see #removeUsername
     */
    public final void setUsername(String val) {
        setString(getUsernameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>username</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getUsername
     * @see #setUsername
     */
    public final void removeUsername() {
        removeValue(getUsernameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getUsername
     * @see #setUsername
     */
    public final boolean isUsernameDefaultValue() {
        return isDefaultValue(getUsernameAttribute(getMtDatabase()));
    }


    /* Attribute 'password' */

    /** Attribute <code>password</code> cache ID */
    private static int passwordCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("password",CID));

    /**
     * Gets the <code>password</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getPasswordAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(passwordCID);
    }


    /**
     * Gets the <code>password</code> attribute value.
     * @return the value
     *
     * @see #setPassword
     * @see #removePassword
     */
    public final String getPassword() {
        return getString(getPasswordAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>password</code> attribute value.
     * @param val the new value
     *
     * @see #getPassword
     * @see #removePassword
     */
    public final void setPassword(String val) {
        setString(getPasswordAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>password</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getPassword
     * @see #setPassword
     */
    public final void removePassword() {
        removeValue(getPasswordAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getPassword
     * @see #setPassword
     */
    public final boolean isPasswordDefaultValue() {
        return isDefaultValue(getPasswordAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'hasRoles' */

    /** Relationship <code>hasRoles</code> cache ID */
    private static int hasRolesCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("hasRoles",CID));

    /**
     * Gets the <code>hasRoles</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getHasRolesRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(hasRolesCID);
    }

    /**
     * Gets the <code>hasRoles</code> sucessor object.
     * @return an object 
     *
     * @see #setHasRoles
     * @see #clearHasRoles
     */
    public final Role getHasRoles() {
        return (Role)getSuccessor(getHasRolesRelationship(getMtDatabase()));
    }

    /**
     * Sets the <code>hasRoles</code> successor object. It is not necessary to clear the
     * relationship before setting a new successor.
     * @param succ the new successor object
     *
     * @see #getHasRoles
     * @see #clearHasRoles
     */
    public final void setHasRoles(Role succ) {
        setSuccessor(getHasRolesRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>hasRoles</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearHasRoles() {
        clearSuccessors(getHasRolesRelationship(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public User(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[User]";
    }
}
