package com.soft.application.model;
/*

 * PhotographicImage.java
 *
 * Generated with Matisse Schema Definition Language 9.1.10
 * Generation date: Sat Apr 07 17:57:56 2018
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

import com.matisse.reflect.*;

/**
 * <code>PhotographicImage</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class PhotographicImage extends Item {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.10
     * Generation Date: Sat Apr 07 17:57:56 2018
     */

    /*
     * Class variables and methods
     */

    /** Class <code>PhotographicImage</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("PhotographicImage"));

    /**
     * Gets the <code>PhotographicImage</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public PhotographicImage(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected PhotographicImage(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(PhotographicImage.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, PhotographicImage.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(PhotographicImage.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, PhotographicImage.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'imageType' */

    /** Attribute <code>imageType</code> cache ID */
    private static int imageTypeCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("imageType",CID));

    /**
     * Gets the <code>imageType</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getImageTypeAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(imageTypeCID);
    }


    /**
     * Gets the <code>imageType</code> attribute value.
     * @return the value
     *
     * @see #setImageType
     * @see #removeImageType
     */
    public final String getImageType() {
        return getString(getImageTypeAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>imageType</code> attribute value.
     * @param val the new value
     *
     * @see #getImageType
     * @see #removeImageType
     */
    public final void setImageType(String val) {
        setString(getImageTypeAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>imageType</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getImageType
     * @see #setImageType
     */
    public final void removeImageType() {
        removeValue(getImageTypeAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getImageType
     * @see #setImageType
     */
    public final boolean isImageTypeDefaultValue() {
        return isDefaultValue(getImageTypeAttribute(getMtDatabase()));
    }


    /* Attribute 'height' */

    /** Attribute <code>height</code> cache ID */
    private static int heightCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("height",CID));

    /**
     * Gets the <code>height</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getHeightAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(heightCID);
    }


    /**
     * Gets the <code>height</code> attribute value.
     * @return the value
     *
     * @see #setHeight
     * @see #removeHeight
     */
    public final double getHeight() {
        return getDouble(getHeightAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>height</code> attribute value.
     * @param val the new value
     *
     * @see #getHeight
     * @see #removeHeight
     */
    public final void setHeight(double val) {
        setDouble(getHeightAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>height</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getHeight
     * @see #setHeight
     */
    public final void removeHeight() {
        removeValue(getHeightAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getHeight
     * @see #setHeight
     */
    public final boolean isHeightDefaultValue() {
        return isDefaultValue(getHeightAttribute(getMtDatabase()));
    }


    /* Attribute 'length' */

    /** Attribute <code>length</code> cache ID */
    private static int lengthCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("length",CID));

    /**
     * Gets the <code>length</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getLengthAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(lengthCID);
    }


    /**
     * Gets the <code>length</code> attribute value.
     * @return the value
     *
     * @see #setLength
     * @see #removeLength
     */
    public final double getLength() {
        return getDouble(getLengthAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>length</code> attribute value.
     * @param val the new value
     *
     * @see #getLength
     * @see #removeLength
     */
    public final void setLength(double val) {
        setDouble(getLengthAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>length</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getLength
     * @see #setLength
     */
    public final void removeLength() {
        removeValue(getLengthAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getLength
     * @see #setLength
     */
    public final boolean isLengthDefaultValue() {
        return isDefaultValue(getLengthAttribute(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public PhotographicImage(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[PhotographicImage]";
    }
}
